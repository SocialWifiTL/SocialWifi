# -*- coding: utf-8 -*-
"""SocialWifi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ugk-4bYEv4r_uKKlHA5yRF2fE85JRWeW
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/TechLabs/SocialWifi
#von "Für mich freigegeben" eine Verknüpfung herstellen zum eigenen Drive Ordner, ggf. Ordnerstruktur anpassen

# Pakete installieren
!pip install geopandas
!pip install geoplot
!pip install cartopy
!pip install pandas
!pip install folium

!pip install streamlit
!pip install leafmap

# Pakete laden

import geopandas as gpd
import geoplot.crs as gcrs
import geoplot as gplt
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import pandas as pd
import folium
from folium.plugins import Geocoder

# Daten einlesen (Datei mit Geodaten)
data = gpd.read_file("data/K-2021-AI-S-01--AI1601--2024-06-04.geojson")

# Übersicht über die Daten
print(type(data))
data.head()

# ai1601 bezeichnet das verfügbare Einkommen je EW 2021,
#   d.h. der Betrag, der den privaten Haushalten für Konsumzwecke oder zur Ersparnisbildung zur Verfügung steht. Es ergibt sich dadurch, dass dem Primäreinkommen die monetären Sozialleistungen
#  (Rente, Arbeitslosenhilfe, Kindergeld etc.) sowie die sonstigen laufenden Transfers hinzugefügt werden und die Sozialbeiträge und die sonstigen laufenden Transfers sowie Einkommensteuern und
#  andere Steuern, die von den privaten Haushalten zu leisten sind, abgezogen werden. Das Primäreinkommen der privaten Haushalte enthält die Einkommen aus Erwerbstätigkeit und Vermögen, die den
#  inländischen privaten Haushalten zugeflossen sind (z. B. Selbstständigen- einkommen, Arbeitnehmerentgelt).


# schluessel ist der Gleiche Index wie beim Breitbandatlas

# erster Plot - eingefärbt nach verfügbarem Einkommen
data = data.to_crs('EPSG:4839')

data.plot(
    column = "ai1601",
    legend = True
    )

plt.savefig('plot.png')

# Excel mit Daten aus dem Breitbandatlas einlesen
dataB = pd.read_excel("data/Breitband.xlsx")

# Überblick über die ersten Zeilen der Daten
print(type(dataB))
dataB.head()

# gemeinsames Dataframe aus Geodaten (data) und Breitbandatlas (dataB) erstellen
df = pd.DataFrame(dataB)
print(df.dtypes)

df2 = pd.DataFrame(data)
print(df2.dtypes)

# Variable "schluessel" in Integer umwandeln, damit der Datentyp in beiden Datensätzen gleich ist
data['schluessel'] = data["schluessel"].astype(int)

# Datensätze anhand des Schlüssels/Index mergen
fullData = data.merge(
    dataB,
    left_on=['schluessel'],  # identifier from geodataframe
    right_on=['AGS']  # identifier from dataframe
)
# Übersicht über die ersten 10 Zeilen
fullData.head(10)

# Daten plotten mit Farbskala nach Internetgeschwindigkeit - Einkommensverteilung ist nicht abgebildet
fullData = fullData.to_crs('EPSG:4839')

fullData.plot(
    column = "5G",
    legend = True
    )

fullData.plot(
    column = "≥ 1000 Mbit/s",
    legend = True
    )

fullData.plot(
    column = "≥ 16 Mbit/s",
    legend = True
    )

# Was ist für Homeoffice z.B. relevant an Internetgeschwindigkeit?
# Empfehlung von vodafone ist 250 Mbit/s für zuverlässiges Homeoffice

# letzten 6 Zeilen des Datensatzes anzeigen
dataB['schluessel'] = dataB['AGS']

dataB.tail(6)

!pip install branca
import branca as branca

# Für Farbschattierungen der Kreise

from branca.colormap import linear

# Kleinster und größter Wert in der Spalte 'ai1601'
min_value = min(fullData['ai1601'])
max_value = max(fullData['ai1601'])

print(max_value)
print(min_value)

# Erstelle eine lineare Farbabstufung
colormap = linear.RdYlGn_11.scale(min_value, max_value)


# Kleinster und größter Wert in der Spalte '≥ 1000 Mbit/s'
min_value_bb = min(fullData['≥ 1000 Mbit/s'])
max_value_bb = max(fullData['≥ 1000 Mbit/s'])

# Erstelle eine lineare Farbabstufung
colormap_bb = linear.RdYlGn_11.scale(min_value_bb, max_value_bb)

# Vorschlag für interaktive Karte, in der man zoomen kann

# Erstelle eine Basis-Karte
# Mittelpunkt auf die durchschnittliche Koordinate des Geodaten-Satzes
map_center = [51.1657, 10.4515]
mymap = folium.Map(location=map_center, zoom_start=7, name = 'Karte')

# Füge die Geodaten zur Karte hinzu
folium.GeoJson(fullData,
               name = 'Kreisebene').add_to(mymap)

# Karte nach Einkommen
folium.GeoJson(
    fullData, #Datensatz
    style_function=lambda x: {
        'fillColor': '#0CAC1F' if x['properties']['ai1601'] > 25936
                      else '#92D050' if x['properties']['ai1601'] > 24606
                      else '#FFC000' if x['properties']['ai1601'] > 23440
                      else '#F1623B' if x['properties']['ai1601'] > 22208
                      else '#C82808',
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.6
    },
    # Info-Feld als Überlagerung ergänzen
    highlight_function=lambda x: {'weight': 3},
    tooltip=folium.GeoJsonTooltip(
        fields=['gen', 'ai1601', '≥ 1000 Mbit/s'], #Variablen, die angezeigt werden sollen
        aliases=['Kreis', 'Verfügbares Einkommen: ', 'Prozent von ≥ 1000 Mbit/s'], #Namen der Variablen bzw. Daten, die angezeigt werden
        labels=True,
        sticky=False
    ),
    marker = folium.CircleMarker(radius = 5),
    name = 'Verfügbares Einkommen pro Haushalt'
).add_to(mymap)

# Karte nach Breitbandverfügbarkeit
folium.GeoJson(
    fullData,
    style_function=lambda x: {
        'fillColor': colormap_bb(x['properties']['≥ 1000 Mbit/s']),
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.6
    },
    highlight_function=lambda x: {'weight': 3},
    tooltip=folium.GeoJsonTooltip(
        fields=['gen', 'ai1601', '≥ 1000 Mbit/s'],
        aliases=['Kreis', 'Verfügbares Einkommen: ', 'Prozent von ≥ 1000 Mbit/s'],
        labels=True,
        sticky=False
    ),
    name = 'Breitbandverfügbarkeit ≥ 1000 Mbit/s'
).add_to(mymap)


Geocoder(position = 'topleft').add_to(mymap)


# Speichere die Karte als HTML-Datei
mymap.save('mymap.html')

# Zeige die Karte
#mymap

from branca.element import Template, MacroElement

template = """
{% macro html(this, kwargs) %}

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>jQuery UI Draggable - Default functionality</title>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

  <script>
  $( function() {
    $( "#maplegend" ).draggable({
                    start: function (event, ui) {
                        $(this).css({
                            right: "auto",
                            top: "auto",
                            bottom: "auto"
                        });
                    }
                });
});

  </script>
</head>
<body>


<div id='maplegend' class='maplegend'
    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);
     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>

<div class='legend-title'>Legende für verfügbares Einkommen in Euro <br>(verschiebbar!)</div>
<div class='legend-scale'>
  <ul class='legend-labels'>
    <li><span style='background:#0CAC1F;opacity:0.7;'></span>25936 bis 37515</li>
    <li><span style='background:#92D050;opacity:0.7;'></span>24606 bis 25935</li>
    <li><span style='background:#FFC000;opacity:0.7;'></span>23440 bis 24605</li>
    <li><span style='background:#F1623B;opacity:0.7;'></span>22208 bis 23439</li>
    <li><span style='background:#C82808;opacity:0.7;'></span>17924 bis 22207</li>

  </ul>
</div>
</div>

</body>
</html>

<style type='text/css'>
  .maplegend .legend-title {
    text-align: left;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 90%;
    }
  .maplegend .legend-scale ul {
    margin: 0;
    margin-bottom: 5px;
    padding: 0;
    float: left;
    list-style: none;
    }
  .maplegend .legend-scale ul li {
    font-size: 80%;
    list-style: none;
    margin-left: 0;
    line-height: 18px;
    margin-bottom: 2px;
    }
  .maplegend ul.legend-labels li span {
    display: block;
    float: left;
    height: 16px;
    width: 30px;
    margin-right: 5px;
    margin-left: 0;
    border: 1px solid #999;
    }
  .maplegend .legend-source {
    font-size: 80%;
    color: #777;
    clear: both;
    }
  .maplegend a {
    color: #777;
    }
</style>
{% endmacro %}"""

macro = MacroElement()
macro._template = Template(template)

mymap.get_root().add_child(macro)

# Farbbalken hinzufügen


legend_breitband = branca.colormap.LinearColormap(
        ["red", "yellow", "green"],
        vmin=fullData["≥ 1000 Mbit/s"].min(),
        vmax=fullData["≥ 1000 Mbit/s"].max(),
        caption = "Breitbandverfügbarkeit in Prozent (> 1000 Mbit/s)"
        )

layer = folium.map.LayerControl(position="bottomleft")
mymap.add_child(layer)
mymap.add_child(legend_breitband)
#legende.add_to(mymap)

# Farbbalken positionieren (klappt noch nicht)
#legende.add_to(mymap, "bottomright")

# Speichere die Karte als HTML-Datei
mymap.save('mymap21.html')

# löscht die "alte" Karte zum Testen neuer Funktionen

dir()

del layer
del mymap
del legend_breitband